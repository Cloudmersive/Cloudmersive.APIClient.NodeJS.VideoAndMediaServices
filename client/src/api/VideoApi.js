/**
 * videoapi
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveVideoApiClient) {
      root.CloudmersiveVideoApiClient = {};
    }
    root.CloudmersiveVideoApiClient.VideoApi = factory(root.CloudmersiveVideoApiClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Video service.
   * @module api/VideoApi
   * @version 2.0.1
   */

  /**
   * Constructs a new VideoApi. 
   * @alias module:api/VideoApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the videoConvertToGif operation.
     * @callback module:api/VideoApi~videoConvertToGifCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Video to Animated GIF format.
     * Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
     * @param {Number} opts.maxWidth Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels.
     * @param {Number} opts.maxHeight Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels.
     * @param {Boolean} opts.preserveAspectRatio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
     * @param {Number} opts.frameRate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second.
     * @param {Boolean} opts.extendProcessingTime Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
     * @param {Date} opts.startTime Optional; Specify the desired starting time of the GIF video in TimeSpan format.
     * @param {Date} opts.timeSpan Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes.
     * @param {module:api/VideoApi~videoConvertToGifCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.videoConvertToGif = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling videoConvertToGif");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'fileUrl': opts['fileUrl'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'preserveAspectRatio': opts['preserveAspectRatio'],
        'frameRate': opts['frameRate'],
        'extendProcessingTime': opts['extendProcessingTime'],
        'startTime': opts['startTime'],
        'timeSpan': opts['timeSpan']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/video/convert/to/gif', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the videoConvertToMov operation.
     * @callback module:api/VideoApi~videoConvertToMovCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Video to MOV format.
     * Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
     * @param {Number} opts.maxWidth Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
     * @param {Number} opts.maxHeight Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
     * @param {Boolean} opts.preserveAspectRatio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
     * @param {Number} opts.frameRate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
     * @param {Number} opts.quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
     * @param {Boolean} opts.extendProcessingTime Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
     * @param {module:api/VideoApi~videoConvertToMovCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.videoConvertToMov = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling videoConvertToMov");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'fileUrl': opts['fileUrl'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'preserveAspectRatio': opts['preserveAspectRatio'],
        'frameRate': opts['frameRate'],
        'quality': opts['quality'],
        'extendProcessingTime': opts['extendProcessingTime']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/video/convert/to/mov', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the videoConvertToMp4 operation.
     * @callback module:api/VideoApi~videoConvertToMp4Callback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Video to MP4 format.
     * Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
     * @param {Number} opts.maxWidth Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
     * @param {Number} opts.maxHeight Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
     * @param {Boolean} opts.preserveAspectRatio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
     * @param {Number} opts.frameRate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
     * @param {Number} opts.quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
     * @param {Boolean} opts.extendProcessingTime Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
     * @param {module:api/VideoApi~videoConvertToMp4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.videoConvertToMp4 = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling videoConvertToMp4");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'fileUrl': opts['fileUrl'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'preserveAspectRatio': opts['preserveAspectRatio'],
        'frameRate': opts['frameRate'],
        'quality': opts['quality'],
        'extendProcessingTime': opts['extendProcessingTime']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/video/convert/to/mp4', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the videoConvertToWebm operation.
     * @callback module:api/VideoApi~videoConvertToWebmCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Video to WEBM format.
     * Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
     * @param {Number} opts.maxWidth Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
     * @param {Number} opts.maxHeight Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
     * @param {Boolean} opts.preserveAspectRatio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
     * @param {Number} opts.frameRate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
     * @param {Number} opts.quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
     * @param {Boolean} opts.extendProcessingTime Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
     * @param {module:api/VideoApi~videoConvertToWebmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.videoConvertToWebm = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling videoConvertToWebm");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'fileUrl': opts['fileUrl'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'preserveAspectRatio': opts['preserveAspectRatio'],
        'frameRate': opts['frameRate'],
        'quality': opts['quality'],
        'extendProcessingTime': opts['extendProcessingTime']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/video/convert/to/webm', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the videoGetInfo operation.
     * @callback module:api/VideoApi~videoGetInfoCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed information about a video or audio file
     * Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
     * @param {module:api/VideoApi~videoGetInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.videoGetInfo = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling videoGetInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'fileUrl': opts['fileUrl']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/video/convert/get-info', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
