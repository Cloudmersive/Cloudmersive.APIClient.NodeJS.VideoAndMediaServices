/**
 * videoapi
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MediaInformation', 'model/NsfwResult', 'model/NsfwScannedFrame', 'model/SplitVideoResult', 'model/StillFrame', 'model/StillFramesResult', 'model/VideoFile', 'api/AudioApi', 'api/VideoApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/MediaInformation'), require('./model/NsfwResult'), require('./model/NsfwScannedFrame'), require('./model/SplitVideoResult'), require('./model/StillFrame'), require('./model/StillFramesResult'), require('./model/VideoFile'), require('./api/AudioApi'), require('./api/VideoApi'));
  }
}(function(ApiClient, MediaInformation, NsfwResult, NsfwScannedFrame, SplitVideoResult, StillFrame, StillFramesResult, VideoFile, AudioApi, VideoApi) {
  'use strict';

  /**
   * The_video_APIs_help_you_convert_encode_and_transcode_videos_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var CloudmersiveVideoApiClient = require('index'); // See note below*.
   * var xxxSvc = new CloudmersiveVideoApiClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new CloudmersiveVideoApiClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new CloudmersiveVideoApiClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new CloudmersiveVideoApiClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 2.0.5
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The MediaInformation model constructor.
     * @property {module:model/MediaInformation}
     */
    MediaInformation: MediaInformation,
    /**
     * The NsfwResult model constructor.
     * @property {module:model/NsfwResult}
     */
    NsfwResult: NsfwResult,
    /**
     * The NsfwScannedFrame model constructor.
     * @property {module:model/NsfwScannedFrame}
     */
    NsfwScannedFrame: NsfwScannedFrame,
    /**
     * The SplitVideoResult model constructor.
     * @property {module:model/SplitVideoResult}
     */
    SplitVideoResult: SplitVideoResult,
    /**
     * The StillFrame model constructor.
     * @property {module:model/StillFrame}
     */
    StillFrame: StillFrame,
    /**
     * The StillFramesResult model constructor.
     * @property {module:model/StillFramesResult}
     */
    StillFramesResult: StillFramesResult,
    /**
     * The VideoFile model constructor.
     * @property {module:model/VideoFile}
     */
    VideoFile: VideoFile,
    /**
     * The AudioApi service constructor.
     * @property {module:api/AudioApi}
     */
    AudioApi: AudioApi,
    /**
     * The VideoApi service constructor.
     * @property {module:api/VideoApi}
     */
    VideoApi: VideoApi
  };

  return exports;
}));
